// TestEncryDllDlg.cpp : implementation file
//

#include "stdafx.h"
#include "TestEncryDll.h"
#include "TestEncryDllDlg.h"

#include "reg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	//{{AFX_DATA(CAboutDlg)
	enum { IDD = IDD_ABOUTBOX };
	//}}AFX_DATA

	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CAboutDlg)
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
	//}}AFX_VIRTUAL

// Implementation
protected:
	//{{AFX_MSG(CAboutDlg)
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
	//{{AFX_DATA_INIT(CAboutDlg)
	//}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAboutDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
	//{{AFX_MSG_MAP(CAboutDlg)
		// No message handlers
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTestEncryDllDlg dialog

CTestEncryDllDlg::CTestEncryDllDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CTestEncryDllDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CTestEncryDllDlg)
	m_DiskIdStr = _T("");
	m_MD5Text = _T("");
	m_MD5Result = _T("");
	m_BlowfishText = _T("");
	m_BlowfishKey = _T("");
	m_BlowfishResult = _T("");
	m_InputProcStr = _T("");
	m_ProcStrKey = _T("");
	m_ProcStrResult = _T("");
	m_N_Str = _T("");
	m_D_Str = _T("");
	m_RSA_InputStr = _T("");
	m_RSA_OutputStr = _T("");
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CTestEncryDllDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTestEncryDllDlg)
	DDX_Text(pDX, IDC_DISKID_EDIT, m_DiskIdStr);
	DDX_Text(pDX, IDC_MD5_EDIT, m_MD5Text);
	DDV_MaxChars(pDX, m_MD5Text, 32);
	DDX_Text(pDX, IDC_MD5_RESULT, m_MD5Result);
	DDX_Text(pDX, IDC_BLOWFISH_TEXT, m_BlowfishText);
	DDX_Text(pDX, IDC_BLOWFISH_KEYTEXT, m_BlowfishKey);
	DDV_MaxChars(pDX, m_BlowfishKey, 48);
	DDX_Text(pDX, IDC_BLOWFISH__RESULT, m_BlowfishResult);
	DDX_Text(pDX, IDC_ENCRYSTR_TEXT, m_InputProcStr);
	DDX_Text(pDX, IDC_ENCRYSTR_KEYTEXT, m_ProcStrKey);
	DDV_MaxChars(pDX, m_ProcStrKey, 16);
	DDX_Text(pDX, IDC_ENCRYSTR__RESULT, m_ProcStrResult);
	DDX_Text(pDX, IDC_N_EDIT, m_N_Str);
	DDV_MaxChars(pDX, m_N_Str, 256);
	DDX_Text(pDX, IDC_D_RESULT, m_D_Str);
	DDX_Text(pDX, IDC_RSA_INPUT, m_RSA_InputStr);
	DDV_MaxChars(pDX, m_RSA_InputStr, 256);
	DDX_Text(pDX, IDC_RSA_OUTPUT, m_RSA_OutputStr);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTestEncryDllDlg, CDialog)
	//{{AFX_MSG_MAP(CTestEncryDllDlg)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_GET_HARDDISK_ID_BUTTON, OnGetHarddiskIdButton)
	ON_BN_CLICKED(IDC_MD5_BUTTON, OnMd5Button)
	ON_BN_CLICKED(IDC_BLOWFISH_BUTTON, OnBlowfishButton)
	ON_BN_CLICKED(IDC_ENCRYSTR_BUTTON, OnEncrystrButton)
	ON_BN_CLICKED(IDC_DEENCRYSTR_BUTTON, OnDeencrystrButton)
	ON_BN_CLICKED(IDC_BLOWFISH_DECRYPT, OnBlowfishDecrypt)
	ON_BN_CLICKED(IDC_RSAENCRYPT, OnRsaencrypt)
	ON_BN_CLICKED(IDC_RSADECRYPT, OnRsadecrypt)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTestEncryDllDlg message handlers

BOOL CTestEncryDllDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
	
	return TRUE;  // return TRUE  unless you set the focus to a control
}

void CTestEncryDllDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CTestEncryDllDlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CTestEncryDllDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}

void CTestEncryDllDlg::OnGetHarddiskIdButton() 
{
	// TODO: Add your control notification handler code here
	
	UpdateData(TRUE);

	char diskid[30];
    memset(diskid,'\0',30);

	BOOL result = GetHardDiskId(diskid,"user-123456789");
	if(result)
	{
		m_DiskIdStr = diskid;
	}

	UpdateData(FALSE);
}


void CTestEncryDllDlg::OnMd5Button() 
{
	// TODO: Add your control notification handler code here
	UpdateData(TRUE);

	char InputStr[33];
    memset(InputStr,'\0',33);

	char OutputStr[33];
    memset(OutputStr,'\0',33);

	strcpy(InputStr,(char *)(LPCTSTR)m_MD5Text);
	
	BOOL result = MD5Encrypt(InputStr,OutputStr,m_MD5Text.GetLength(),"user-123456789");
	if(!result)
	{
		MessageBox("Error! ");
		return;
	}
	
	m_MD5Result = OutputStr;

	UpdateData(FALSE);	
}

void CTestEncryDllDlg::OnBlowfishButton() 
{
	// TODO: Add your control notification handler code here
	UpdateData(TRUE);

	char OutputStr[200];
    memset(OutputStr,'\0',200);
	
    char KeyStr[50] = {0};
	strcpy(KeyStr,(char *)(LPCTSTR)m_BlowfishKey);
	
	BOOL result = BlowFishEncrypt(m_BlowfishText,KeyStr,OutputStr,"user-123456789");
	if(!result)
	{
		MessageBox("Error! ");
		return;
	}
	
	m_BlowfishResult = OutputStr;

	UpdateData(FALSE);		
}

void CTestEncryDllDlg::OnEncrystrButton() 
{
	// TODO: Add your control notification handler code here

	UpdateData(TRUE);

	CString tempInStr;
	tempInStr = m_InputProcStr;
	CString tempKey;
	tempKey = m_ProcStrKey;

	char szDataIn[512] = {'\0'};
	strcpy(szDataIn,(char *)(LPCTSTR)tempInStr);

	char szKey[17] = {'\0'};  
	strcpy(szKey,(char *)(LPCTSTR)tempKey);

	char szDataOut[512] = {'\0'};
    memset(szDataOut,'\0',512);

	EncryptStringFun2(szDataIn, szKey, szDataOut,"user-12345678");
	m_ProcStrResult = szDataOut;

	UpdateData(FALSE);		
}

void CTestEncryDllDlg::OnDeencrystrButton() 
{
	// TODO: Add your control notification handler code here

	UpdateData(TRUE);

	CString tempInStr;
	tempInStr = m_ProcStrResult;
	CString tempKey;
	tempKey = m_ProcStrKey;

	char szDataIn[512] = {'\0'}; 
	strcpy(szDataIn,(char *)(LPCTSTR)tempInStr);

	char szKey[17] = {'\0'}; ; 
	strcpy(szKey,(char *)(LPCTSTR)tempKey);

	char szDataOut[512] = {'\0'}; 
    memset(szDataOut,'\0',512);

	DecryptStringFun2(szDataIn, szKey, szDataOut,"user-12345678");
	m_InputProcStr = szDataOut;

	UpdateData(FALSE);	
}

void CTestEncryDllDlg::OnBlowfishDecrypt() 
{
	UpdateData(TRUE);
	
	char OutputStr[500];
    memset(OutputStr,'\0',500);

	BOOL result = BlowFishDecrypt(m_BlowfishResult,m_BlowfishKey,OutputStr,"user-123456789");
	if(!result)
	{
		MessageBox("Error! ");
		return;
	}
	
	m_BlowfishText = OutputStr;

	UpdateData(FALSE);			

}

void CTestEncryDllDlg::OnRsaencrypt() 
{
	UpdateData(TRUE);

    if(m_N_Str.GetLength() == 0)
    {
        MessageBox("N不能为空！","Error",MB_ICONWARNING);
        return;
    }

    if(m_D_Str.GetLength() == 0)
    {
        MessageBox("D不能为空！","Error",MB_ICONWARNING);
        return;
    }

    if(m_RSA_InputStr.GetLength() == 0)
	{
        MessageBox("请输入待加密的字符串！","Error",MB_ICONWARNING);
		return;
	}

	for(int i=0; i<m_RSA_InputStr.GetLength(); i++)
	{
		if((m_RSA_InputStr[i]<'0') || ((m_RSA_InputStr[i]>'9') && (m_RSA_InputStr[i]<'A')) ||
		   ((m_RSA_InputStr[i]>'F') && (m_RSA_InputStr[i]<'a')) || (m_RSA_InputStr[i]>'f'))
		{
			MessageBox("待加密数据必须为0-9、A-F或a-f组成的数！","Error",MB_ICONWARNING);
			return;
		}
	}

	char OutputStr[500];
	memset(OutputStr,'\0',500);

	//下面演示代码“加密模式”参数使用Mode0，因此输入参数请使用128bit的N、D参数。
	BOOL result = RSAEncrypt(m_RSA_InputStr,m_D_Str,m_N_Str,0,OutputStr,"user-12345678");
	if(!result)
	{
		MessageBox("Error! ");
		return;
	}

	m_RSA_OutputStr = OutputStr; //输出RSA加密后字符串

	UpdateData(FALSE);			
}

void CTestEncryDllDlg::OnRsadecrypt() 
{
	UpdateData(TRUE);

    if(m_N_Str.GetLength() == 0)
    {
        MessageBox("N不能为空！","Error",MB_ICONWARNING);
        return;
    }

    if(m_RSA_OutputStr.GetLength() == 0)
	{
        MessageBox("请输入待解密的字符串！","Error",MB_ICONWARNING);
		return;
	}

	char OutputStr[500];
	memset(OutputStr,'\0',500);

	//下面演示代码“加密模式”参数使用Mode0，因此输入参数请使用128bit的N、D参数。
	BOOL result = RSADecrypt(m_RSA_OutputStr,m_N_Str,0,OutputStr,"user-12345678");
	if(!result)
	{
		MessageBox("Error! ");
		return;
	}

	m_RSA_OutputStr = OutputStr; //输出RSA解密后字符串

	UpdateData(FALSE);				
}
